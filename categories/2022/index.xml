<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022 on eBPF - the Super Power for Kernel</title><link>http://ebpf.xyz/categories/2022/</link><description>Recent content in 2022 on eBPF - the Super Power for Kernel</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 26 Mar 2022 11:17:01 +0800</lastBuildDate><atom:link href="http://ebpf.xyz/categories/2022/index.xml" rel="self" type="application/rss+xml"/><item><title>Awesome eBPF</title><link>http://ebpf.xyz/post/awesome-ebpf/</link><pubDate>Sat, 26 Mar 2022 11:17:01 +0800</pubDate><guid>http://ebpf.xyz/post/awesome-ebpf/</guid><description>Addrï¼šhttps://ebpf.xyz/post/awesome-ebpf
A curated list of awesome projects related to eBPF.
BPF, as in Berkeley Packet Filter, is an in-kernel virtual machine running programs passed from user space. Initially implemented on BSD, then Linux, the (now legacy) &amp;ldquo;classic BPF&amp;rdquo; or cBPF machine would be used with tools like tcpdump for filtering packets in the kernel to avoid useless copies to user space. More recently, the BPF infrastructure in Linux has been completely reworked and gave life to the &amp;ldquo;extended BPF&amp;rdquo;, or eBPF, which gained new features (safety and termination checks, JIT-compiling for programs, persistent maps, a standard library, hardware offload support, etc.</description></item></channel></rss>