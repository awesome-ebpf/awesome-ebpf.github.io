<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bcc-ex on eBPF - the Super Power for Kernel</title><link>http://ebpf.xyz/categories/bcc-ex/</link><description>Recent content in bcc-ex on eBPF - the Super Power for Kernel</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 29 Mar 2022 00:25:47 +0800</lastBuildDate><atom:link href="http://ebpf.xyz/categories/bcc-ex/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Useful Tools With Ebpf Part2 Tracing_the Locks in Linux Kernel</title><link>http://ebpf.xyz/post/build-useful-tools-with-ebpf-part2-tracing_the-locks-in-linux-kernel/</link><pubDate>Tue, 29 Mar 2022 00:25:47 +0800</pubDate><guid>http://ebpf.xyz/post/build-useful-tools-with-ebpf-part2-tracing_the-locks-in-linux-kernel/</guid><description>Addr：https://ebpf.xyz/post/build-useful-tools-with-ebpf-part2-tracing_the-locks-in-Linux-kernel
Linux kernel has different types of locks for synchronization. Spin locks, Semaphores, Futexes are some examples. These locks have different behavior and if they are not used properly, it can create performance degradation. For example, spinlocks have least locking and unlocking times but they waste CPU cycles. Spinlocks are used when the waiting time is known to be small. But if a kernel thread is waiting for a spinlock for a considerable amount of time, CPU time is wasted and system performance will be severely affected.</description></item><item><title>Build Useful Tools With Ebpf Part1 Setup Bcc</title><link>http://ebpf.xyz/post/build-useful-tools-with-ebpf-part1-setup-bcc/</link><pubDate>Tue, 29 Mar 2022 00:23:13 +0800</pubDate><guid>http://ebpf.xyz/post/build-useful-tools-with-ebpf-part1-setup-bcc/</guid><description>Addr：https://ebpf.xyz/post/build-useful-tools-with-ebpf-part1-setup-bc</description></item><item><title>Klock Stat</title><link>http://ebpf.xyz/post/klock-stat/</link><pubDate>Tue, 29 Mar 2022 00:13:09 +0800</pubDate><guid>http://ebpf.xyz/post/klock-stat/</guid><description>Addr：https://ebpf.xyz/post/klock-stat
kLockStat: An eBPF Tool To Monitor Linux Kernel Lock Contentions APRIL 30, 2019
Today most of the applications are multithreaded. Parallelism improves performance of applications. But there can be scalability bottlenecks inside the kernel. There are studies that exposes such bottlenecks in linux kernel. Even if the application is written in a perfectly scalable fasion, sometimes the bottlenecks inside the kernel prevent the application from scaling to a large number of processors.</description></item></channel></rss>