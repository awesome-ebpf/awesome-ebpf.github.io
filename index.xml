<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>eBPF - the Super Power for Kernel</title><link>http://ebpf.xyz/</link><description>Recent content on eBPF - the Super Power for Kernel</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 26 Mar 2022 11:25:58 +0800</lastBuildDate><atom:link href="http://ebpf.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>Dive into BPF: a list of reading material</title><link>http://ebpf.xyz/post/dive_into_ebpf_read_list/</link><pubDate>Sat, 26 Mar 2022 11:25:58 +0800</pubDate><guid>http://ebpf.xyz/post/dive_into_ebpf_read_list/</guid><description>Addr：https://ebpf.xyz/post/dive_into_ebpf_read_list
~ Updated 2019-01-10 ~
Chinese: https://linux.cn/article-9507-1.html (older 2017)
1. What is BPF? BPF, as in Berkeley Packet Filter, was initially conceived in 1992 so as to provide a way to filter packets and to avoid useless packet copies from kernel to userspace. It initially consisted in a simple bytecode that is injected from userspace into the kernel, where it is checked by a verifier—to prevent kernel crashes or security issues—and attached to a socket, then run on each received packet.</description></item><item><title>Awesome eBPF</title><link>http://ebpf.xyz/post/awesome-ebpf/</link><pubDate>Sat, 26 Mar 2022 11:17:01 +0800</pubDate><guid>http://ebpf.xyz/post/awesome-ebpf/</guid><description>Addr：https://ebpf.xyz/post/awesome-ebpf
A curated list of awesome projects related to eBPF.
BPF, as in Berkeley Packet Filter, is an in-kernel virtual machine running programs passed from user space. Initially implemented on BSD, then Linux, the (now legacy) &amp;ldquo;classic BPF&amp;rdquo; or cBPF machine would be used with tools like tcpdump for filtering packets in the kernel to avoid useless copies to user space. More recently, the BPF infrastructure in Linux has been completely reworked and gave life to the &amp;ldquo;extended BPF&amp;rdquo;, or eBPF, which gained new features (safety and termination checks, JIT-compiling for programs, persistent maps, a standard library, hardware offload support, etc.</description></item><item><title>What is eBPF?</title><link>http://ebpf.xyz/post/what_is_ebpf/</link><pubDate>Fri, 25 Mar 2022 23:34:17 +0800</pubDate><guid>http://ebpf.xyz/post/what_is_ebpf/</guid><description>Addr: https://awesome-ebpf.github.io//what_is_ebpf
1. What is eBPF? eBPF is a revolutionary technology with origins in the Linux kernel that can run sandboxed programs in an operating system kernel. It is used to safely and efficiently extend the capabilities of the kernel without requiring to change kernel source code or load kernel modules.
Historically, the operating system has always been an ideal place to implement observability, security, and networking functionality due to the kernel’s privileged ability to oversee and control the entire system.</description></item></channel></rss>